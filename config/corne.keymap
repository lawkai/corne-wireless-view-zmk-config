/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    retro-tap;
    tapping-term-ms = <180>;
};

&mt {
    require-prior-idle-ms = <125>;
    tapping-term-ms = <180>;
    hold-while-undecided;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

/ {
    behaviors {
        bspcdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BDEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_RALT)>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;

            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shifted>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
        };

        lst: lst {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_shift_tap";
            bindings = <&shifted_mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "hold-preferred";
        };

        sal: sticky_and_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_AND_LAYER";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
        };

        sac: sac {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_AND_CAPSWORD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            hold-while-undecided;
        };

        std: shift_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT>, <&mo 2>;

            tapping-term-ms = <180>;
        };
    };
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos { compatible = "zmk,combos"; };

    macros {
        shifted: macro_shifted_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "MACRO_SHIFTED_KP";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        shifted_mo: shifted_mo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &kp LSHIFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &kp LEFT_SHIFT>;

            label = "SHIFTED_MO";
            wait-ms = <0>;
            tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&gresc        &kp Q  &kp W  &kp E             &kp R              &kp T      &kp Y      &kp U  &kp I          &kp O    &kp P     &bspcdel
&mt LGUI TAB  &kp A  &kp S  &kp D             &kp F              &kp G      &kp H      &kp J  &kp K          &kp L    &kp SEMI  &mt RCTRL SQT
&lt 1 MINUS   &kp Z  &kp X  &kp C             &kp V              &kp B      &kp N      &kp M  &kp COMMA      &kp DOT  &kp FSLH  &lst 1 EQUAL
                            &kp LEFT_CONTROL  &sac LEFT_SHIFT 0  &kp RET    &kp SPACE  &std   &kp RIGHT_ALT
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&kp GRAVE         &kp F1  &kp F2  &kp F3  &kp F4  &kp F5     &kp F6   &kp F7  &kp F8  &kp F9  &kp F10  &kp BSLH
&kp LEFT_BRACKET  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp N6   &kp N7  &kp N8  &kp N9  &kp N0   &kp RIGHT_BRACKET
&kp UNDER         &none   &none   &none   &none   &kp F11    &kp F12  &none   &none   &none   &none    &kp PLUS
                                  &trans  &trans  &trans     &trans   &trans  &trans
            >;
        };

        raise_layer {
            bindings = <
&none  &none  &none           &kp UP    &none      &none           &none     &none              &none          &none      &none  &trans
&none  &none  &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &none           &kp LEFT  &kp DOWN           &kp UP         &kp RIGHT  &none  &none
&mo 3  &none  &none           &none     &none      &none           &none     &none              &none          &none      &none  &none
                              &none     &trans     &kp LEFT_GUI    &kp RET   &kp RIGHT_CONTROL  &kp RIGHT_ALT
            >;

            label = "Raise";
        };

        misc_layer {
            label = "Misc";
            bindings = <
&none         &none         &none         &none         &none         &none           &none  &none   &none  &none  &none  &bt BT_CLR
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none   &none  &none  &none  &none
&none         &none         &none         &none         &none         &none           &none  &none   &none  &none  &none  &none
                                          &none         &none         &none           &none  &trans  &none
            >;
        };

        numpad_layer {
            bindings = <
&kp ESC  &kp EQUAL        &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp BACKSPACE    &none  &none  &none  &none  &none  &none
&kp TAB  &kp KP_DIVIDE    &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS     &none  &none  &none  &none  &none  &none
&trans   &kp KP_MULTIPLY  &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_PLUS      &none  &none  &none  &none  &none  &none
                                     &kp KP_N0  &kp KP_DOT  &kp RET          &none  &none  &none
            >;

            label = "Num";
        };
    };
};
