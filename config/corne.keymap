/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    flavor = "balanced";
    retro-tap;
};

&mt {
    retro-tap;
};

/ {
    behaviors {
        bspcdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BDEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;

            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lshftcl: LSHIFT_CAPS_LOCK {
            compatible = "zmk,behavior-tap-dance";
            label = "LSHIFT_CAPS_LOCK";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&kp CLCK>;
        };

        rshftcl: RSHIFT_CAPS_LOCK {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHIFT_CAPS_LOCK";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&kp CLCK>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        conn_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&gresc          &kp Q  &kp W  &kp E     &kp R      &kp T          &kp Y        &kp U     &kp I      &kp O    &kp P     &bspcdel
&mt LCTRL TAB   &kp A  &kp S  &kp D     &kp F      &kp G          &kp H        &kp J     &kp K      &kp L    &kp SQT   &mt RCTRL RET
&mt LGUI COLON  &kp Z  &kp X  &kp C     &kp V      &kp B          &kp N        &kp M     &kp COMMA  &kp DOT  &kp FSLH  &mt RGUI SEMI
                              &kp LALT  &kp LSHFT  &lt 1 SPACE    &lt 2 SPACE  &rshftcl  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE  &kp N1     &kp N2    &kp N3    &kp N4    &kp N5       &kp N6     &kp N7    &kp N8     &kp N9     &kp N0     &trans
&kp PIPE   &kp EXCL   &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH
&kp LT     &kp UNDER  &kp LPAR  &kp LBRC  &kp LBKT  &trans       &trans     &kp RBKT  &kp RBRC   &kp RPAR   &kp PLUS   &kp GT
                                &trans    &trans    &trans       &trans     &trans    &trans
            >;

            label = "Lower";
        };

        raise_layer {
            bindings = <
&kp F1  &kp F2    &kp F3     &kp F4     &kp F5     &kp F6      &kp F7    &kp F8    &kp F9  &kp F10    &kp F11  &kp F12
&trans  &mkp MB4  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB5    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
&trans  &trans    &trans     &trans     &trans     &trans      &trans    &trans    &trans  &trans     &trans   &trans
                             &trans     &trans     &trans      &trans    &trans    &trans
            >;

            label = "Raise";
        };

        conn_layer {
            label = "Conn";
            bindings = <
&out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none  &none  &none  &none
&out OUT_USB  &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &none
&bt BT_CLR    &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &none
                                          &none         &none         &none           &none  &none  &none
            >;
        };
    };
};
