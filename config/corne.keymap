/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
};

&mt {
    retro-tap;
    tapping-term-ms = <175>;
};

/ {
    behaviors {
        bspcdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BDEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;

            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ld1: layer_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&sk RALT>;
        };

        ld2: layer_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 2>, <&to 2>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        conn_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&gresc         &kp Q  &kp W  &kp E     &kp R  &kp T       &kp Y      &kp U  &kp I      &kp O    &kp P      &bspcdel
&mt LCTRL TAB  &kp A  &kp S  &kp D     &kp F  &kp G       &kp H      &kp J  &kp K      &kp L    &kp SEMI   &mt RCTRL RET
&kp LSHFT      &kp Z  &kp X  &kp C     &kp V  &kp B       &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp RSHFT
                             &kp LALT  &mo 1  &kp LGUI    &kp SPACE  &mo 2  &kp RALT
            >;
        };

        num_layer {
            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6     &kp N7    &kp N8    &kp N9     &kp N0    &trans
&trans     &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp LBKT  &kp RBKT  &kp EQUAL  &kp APOS  &kp BSLH
&trans     &trans  &trans  &trans  &trans  &trans    &trans     &trans    &trans    &trans     &trans    &trans
                           &trans  &trans  &trans    &trans     &trans    &trans
            >;

            label = "Num";
        };

        nav_layer {
            bindings = <
&trans  &kp RA(N1)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp RA(NUMBER_4)  &kp RA(N5)    &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans      &trans            &trans            &trans            &trans        &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans      &trans            &trans            &trans            &trans        &trans    &trans    &trans  &trans     &trans  &trans
                                      &trans            &trans            &trans        &trans    &trans    &trans
            >;

            label = "Nav";
        };

        conn_layer {
            label = "Conn";
            bindings = <
&out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none  &none  &none  &none
&out OUT_USB  &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &none
&bt BT_CLR    &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &none
                                          &none         &none         &none           &none  &none  &none
            >;
        };
    };
};
